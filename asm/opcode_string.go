// Code generated by "stringer -output opcode_string.go -type=Class,Size,Mode,Source,Endianness,ALUOp,JumpOp"; DO NOT EDIT.

package asm

import "strconv"

const (
	_Class_name_0 = "LdClassLdXClassStClassStXClassALUClassJmpClass"
	_Class_name_1 = "ALU64Class"
)

var (
	_Class_index_0 = [...]uint8{0, 7, 15, 22, 30, 38, 46}
)

func (i Class) String() string {
	switch {
	case 0 <= i && i <= 5:
		return _Class_name_0[_Class_index_0[i]:_Class_index_0[i+1]]
	case i == 7:
		return _Class_name_1
	default:
		return "Class(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const (
	_Size_name_0 = "Word"
	_Size_name_1 = "Half"
	_Size_name_2 = "Byte"
	_Size_name_3 = "DWord"
	_Size_name_4 = "InvalidSize"
)

func (i Size) String() string {
	switch {
	case i == 0:
		return _Size_name_0
	case i == 8:
		return _Size_name_1
	case i == 16:
		return _Size_name_2
	case i == 24:
		return _Size_name_3
	case i == 255:
		return _Size_name_4
	default:
		return "Size(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const (
	_Mode_name_0 = "ImmMode"
	_Mode_name_1 = "AbsMode"
	_Mode_name_2 = "IndMode"
	_Mode_name_3 = "MemMode"
	_Mode_name_4 = "XAddMode"
	_Mode_name_5 = "InvalidMode"
)

func (i Mode) String() string {
	switch {
	case i == 0:
		return _Mode_name_0
	case i == 32:
		return _Mode_name_1
	case i == 64:
		return _Mode_name_2
	case i == 96:
		return _Mode_name_3
	case i == 192:
		return _Mode_name_4
	case i == 255:
		return _Mode_name_5
	default:
		return "Mode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const (
	_Source_name_0 = "ImmSource"
	_Source_name_1 = "RegSource"
	_Source_name_2 = "InvalidSource"
)

func (i Source) String() string {
	switch {
	case i == 0:
		return _Source_name_0
	case i == 8:
		return _Source_name_1
	case i == 255:
		return _Source_name_2
	default:
		return "Source(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const (
	_Endianness_name_0 = "LittleEndian"
	_Endianness_name_1 = "BigEndian"
	_Endianness_name_2 = "InvalidEndian"
)

func (i Endianness) String() string {
	switch {
	case i == 0:
		return _Endianness_name_0
	case i == 8:
		return _Endianness_name_1
	case i == 255:
		return _Endianness_name_2
	default:
		return "Endianness(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const _ALUOp_name = "AddSubMulDivOrAndLShRShNegModXOrMovArShEndianInvalidALUOp"

var _ALUOp_map = map[ALUOp]string{
	0:   _ALUOp_name[0:3],
	16:  _ALUOp_name[3:6],
	32:  _ALUOp_name[6:9],
	48:  _ALUOp_name[9:12],
	64:  _ALUOp_name[12:14],
	80:  _ALUOp_name[14:17],
	96:  _ALUOp_name[17:20],
	112: _ALUOp_name[20:23],
	128: _ALUOp_name[23:26],
	144: _ALUOp_name[26:29],
	160: _ALUOp_name[29:32],
	176: _ALUOp_name[32:35],
	192: _ALUOp_name[35:39],
	208: _ALUOp_name[39:45],
	255: _ALUOp_name[45:57],
}

func (i ALUOp) String() string {
	if str, ok := _ALUOp_map[i]; ok {
		return str
	}
	return "ALUOp(" + strconv.FormatInt(int64(i), 10) + ")"
}

const _JumpOp_name = "JaOpJEqOpJGTOpJGEOpJSETOpJNEOpJSGTOpJSGEOpCallOpExitOpInvalidJumpOp"

var _JumpOp_map = map[JumpOp]string{
	0:   _JumpOp_name[0:4],
	16:  _JumpOp_name[4:9],
	32:  _JumpOp_name[9:14],
	48:  _JumpOp_name[14:19],
	64:  _JumpOp_name[19:25],
	80:  _JumpOp_name[25:30],
	96:  _JumpOp_name[30:36],
	112: _JumpOp_name[36:42],
	128: _JumpOp_name[42:48],
	144: _JumpOp_name[48:54],
	255: _JumpOp_name[54:67],
}

func (i JumpOp) String() string {
	if str, ok := _JumpOp_map[i]; ok {
		return str
	}
	return "JumpOp(" + strconv.FormatInt(int64(i), 10) + ")"
}
